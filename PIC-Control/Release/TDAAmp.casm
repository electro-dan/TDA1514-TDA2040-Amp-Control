;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 8.01
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

#ifndef _TDAAMP_H_
#define _TDAAMP_H_

#include <system.h>
#include <stdio.h>

#define	TASKS_LIMIT			8
#define TASK_INT_EXT0		0
#define TASK_INT_PORTB		4
#define TASK_TIMER1_UNMUTE	6
#define TASK_TIMER1			7

// 25 for 200us
// 22 for 176us (doesn't work)
// 26 works
#define IR_PR2_200US 26
// 111 for 888us
// 105 for 840us (doesn't work)
// 112 = no, 111 = misses last bit, 110 = works fine
#define IR_PR2_890US 110

#define IR_PIN (portb.0)
#define STBY_LED (porta.2)
#define IR_LED (portb.2)
#define VOL_UP (porta.4)
#define VOL_DOWN (porta.3)
#define RLY_MUTE (porta.0)
#define RLY_POWER (porta.1)
#define RLY_IN1 (porta.6)
#define RLY_IN2 (portb.5)
#define RLY_IN3 (portb.4)
#define RLY_EXTDECODE (portb.3)
#define SW_PWR (portb.1)
char SW_PWROLD = 1;
015A  3001  	MOVLW 0x01
015B  1283  	BCF STATUS, RP0
015C  1303  	BCF STATUS, RP1
015D  00A5  	MOVWF gbl_SW_PWROLD


// RA0 = Mute Relay
// RA1 = Power Relay
// RA2 = IR LED
// RA3 = Motor Up
// RA4 = Motor Down
// RA5 = MCLR
// RA6 = Relay Audio In 1
// RA7 = Spare Relay
// RB0 = IR
// RB1 = Power Switch
// RB2 = Standby LED
// RB3 = Ext Decode Relay
// RB4 = Relay Audio In 3
// RB5 = Relay Audio In 2
// RB6 = Rotary Encoder
// RB7 = Rotary Encoder

extern char iActiveInput;
extern char iExtSurroundMode;
char iPower = 0;
015E  01A7  	CLRF gbl_iPower

char iActiveInput = 0;
015F  01A6  	CLRF gbl_iActiveInput


char cPortBCurrent;
char cPortBPrevious;

// For IR
unsigned short rc5_inputData; // input data takes 12 bits?
char rc5_bitCount;
char rc5_logicInterval, rc5_logicChange;

enum {
        rc5_idleState,
        rc5_initialWaitState,
        rc5_startBitState,
        rc5_captureBitState
};

char rc5_currentState = rc5_idleState;
0160  01AD  	CLRF gbl_rc5_currentState

char rc5_pinState = 1;
0161  3001  	MOVLW 0x01
0162  00AE  	MOVWF gbl_rc5_pinState

char rc5_intfCounter = 0;
0163  01AF  	CLRF gbl_rc5_intfCounter

char rc5_flickBit = 0;
0164  01B0  	CLRF gbl_rc5_flickBit

char rc5_flickBitOld = 0;
0165  01B1  	CLRF gbl_rc5_flickBitOld

char rc5_address = 0;
0166  01B2  	CLRF gbl_rc5_address

char rc5_command = 0;
0167  01B3  	CLRF gbl_rc5_command



void doPower();
void doMute();
void applyInput();
void doInputDown();
void doInputUp();

#endif //_TDAAMP_H_

#include <system.h>
#include "TDAAmp.h"

//Target PIC16F627A configuration word
#pragma DATA _CONFIG, _PWRTE_OFF & _WDT_OFF & _INTOSC_OSC_NOCLKOUT & _CP_OFF & _LVP_OFF & _BOREN_OFF & _MCLRE_OFF

//Set clock frequency
#pragma CLOCK_FREQ	4000000

char cTask;
char iMute = 0;
0168  01B5  	CLRF gbl_iMute

char iTmr0Counter = 0;
0169  01B6  	CLRF gbl_iTmr0Counter


/******************************************************
  Function called once only to initialise variables and
  setup the PIC registers
*******************************************************/
void initialise() {

	pcon.OSCF = 1; // 4MHz internal osc
00C3  1683  	BSF STATUS, RP0
00C4  1303  	BCF STATUS, RP1
00C5  158E  	BSF gbl_pcon,3


	// Configure port A - all outputs
	// RA0 = Mute Relay
	// RA1 = Power Relay
	// RA2 = IR LED
	// RA3 = Motor Up
	// RA4 = Motor Down
	// RA5 = MCLR (any input)
	// RA6 = Relay Audio In 1
	// RA7 = Spare Relay
	trisa = 0x20;
00C6  3020  	MOVLW 0x20
00C7  0085  	MOVWF gbl_trisa

	porta = 0x00;
00C8  1283  	BCF STATUS, RP0
00C9  0185  	CLRF gbl_porta

	// Configure port B
	// RB0 = IR
	// RB1 = Power Switch
	// RB2 = Standby LED
	// RB3 = Ext Decode Relay
	// RB4 = Relay Audio In 3
	// RB5 = Relay Audio In 2
	// RB6 = Rotary Encoder
	// RB7 = Rotary Encoder
	trisb = 0xC3; // RB0, RB1, RB6, RB7 are inputs
00CA  30C3  	MOVLW 0xC3
00CB  1683  	BSF STATUS, RP0
00CC  0086  	MOVWF gbl_trisb

	portb = 0x00;
00CD  1283  	BCF STATUS, RP0
00CE  0186  	CLRF gbl_portb


	option_reg = 0;
00CF  1683  	BSF STATUS, RP0
00D0  0181  	CLRF gbl_option_reg

	option_reg.NOT_RBPU = 0; // enable pull ups
00D1  1381  	BCF gbl_option_reg,7


    // ADC setup
    cmcon = 7; //disable comparators
00D2  3007  	MOVLW 0x07
00D3  1283  	BCF STATUS, RP0
00D4  009F  	MOVWF gbl_cmcon


	// Setup for RB0 Interrupt [IR Data]
    option_reg.INTEDG = 0; // RB0 interrupt should occur on falling edge
00D5  1683  	BSF STATUS, RP0
00D6  1301  	BCF gbl_option_reg,6

	intcon.INTF = 0; // Clear RB0 interrupt flag bit
00D7  108B  	BCF gbl_intcon,1

	intcon.INTE = 1; // RB0 Interrupt enabled (for IR)
00D8  160B  	BSF gbl_intcon,4

	
	// 50ms timer0
	//Timer0 Registers Prescaler= 1:256 - TMR0 Preset = 60 - Freq = 19.93 Hz - Period = 0.050176 seconds
	option_reg.T0CS = 0; // bit 5  TMR0 Clock Source Select bit...0 = Internal Clock (CLKO) 1 = Transition on T0CKI pin
00D9  1281  	BCF gbl_option_reg,5

	option_reg.T0SE = 0; // bit 4 TMR0 Source Edge Select bit 0 = low/high 1 = high/low
00DA  1201  	BCF gbl_option_reg,4

	option_reg.PSA = 0; // bit 3  Prescaler Assignment bit...0 = Prescaler is assigned to the Timer0
00DB  1181  	BCF gbl_option_reg,3

	option_reg.PS2 = 1; // bits 2-0  PS2:PS0: Prescaler Rate Select bits
00DC  1501  	BSF gbl_option_reg,2

	option_reg.PS1 = 1;
00DD  1481  	BSF gbl_option_reg,1

	option_reg.PS0 = 1;
00DE  1401  	BSF gbl_option_reg,0

	tmr0 = 60; // preset for timer register
00DF  303C  	MOVLW 0x3C
00E0  1283  	BCF STATUS, RP0
00E1  0081  	MOVWF gbl_tmr0

    intcon.T0IF = 0; // Clear timer 1 interrupt flag bit
00E2  110B  	BCF gbl_intcon,2

	intcon.T0IE = 1; // Timer 1 interrupt enabled
00E3  168B  	BSF gbl_intcon,5


    // Timer 2 setup - interrupt every 890us (0.00088800)
    // 4MHz settings
    t2con = 0x38;  //  0 0111 0 00 - 1:8 postscale, timer off, 1:1 prescale
00E4  3038  	MOVLW 0x38
00E5  0092  	MOVWF gbl_t2con

    pr2 = IR_PR2_890US; // Preload timer2 comparator value - 0.00088800s
00E6  306E  	MOVLW 0x6E
00E7  1683  	BSF STATUS, RP0
00E8  0092  	MOVWF gbl_pr2

    pir1.TMR2IF = 0; // Clear timer 2 interrupt flag bit
00E9  1283  	BCF STATUS, RP0
00EA  108C  	BCF gbl_pir1,1

	pie1.TMR2IE = 1; // Timer 2 interrupt enabled
00EB  1683  	BSF STATUS, RP0
00EC  148C  	BSF gbl_pie1,1

    
    // Setup for RB6, RB7 Interrupt [Button press and encoder]
    intcon.RBIF = 0; // Clear Port B change interrupt flag bit
00ED  100B  	BCF gbl_intcon,0

    intcon.RBIE = 1; // Port B change interrupt enabled
00EE  158B  	BSF gbl_intcon,3


    // No task at initialisation
    cPortBPrevious = (portb & 0xC0);
00EF  30C0  	MOVLW 0xC0
00F0  1283  	BCF STATUS, RP0
00F1  0506  	ANDWF gbl_portb, W
00F2  00A9  	MOVWF gbl_cPortBPrevious

    cTask = 0;
00F3  01B4  	CLRF gbl_cTask

    
    // Start up delay to allow things to settle
    delay_s(1);
00F4  3001  	MOVLW 0x01
00F5  00B7  	MOVWF delay_s_00000_arg_del
00F6  201C  	CALL delay_s_00000

    // Ensure ports are still at their defaults
    //porta = 0x00;
   	portb = 0x00;
00F7  0186  	CLRF gbl_portb


	// Enable all interrupts
	intcon.GIE = 1;
00F8  178B  	BSF gbl_intcon,7

	// Enable all unmasked peripheral interrupts (required for TMR2 interrupt)
	intcon.PEIE = 1;
00F9  170B  	BSF gbl_intcon,6

}
00FA  0008  	RETURN


//------------------------------------------------------------------------------
// Interrupt handler
//------------------------------------------------------------------------------
void interrupt() {


	// external interrupt on RB0 - IR sensor
	if (intcon.INTF) {
016D  1C8B  	BTFSS gbl_intcon,1
016E  298C  	GOTO	label31
018C        label31

		option_reg.INTEDG = rc5_intfCounter.0;
016F  1283  	BCF STATUS, RP0
0170  1303  	BCF STATUS, RP1
0171  1C2F  	BTFSS gbl_rc5_intfCounter,0
0172  2975  	GOTO	label28
0173  1683  	BSF STATUS, RP0
0174  1701  	BSF gbl_option_reg,6
0175        label28
0175  1283  	BCF STATUS, RP0
0176  182F  	BTFSC gbl_rc5_intfCounter,0
0177  297A  	GOTO	label29
0178  1683  	BSF STATUS, RP0
0179  1301  	BCF gbl_option_reg,6

		rc5_intfCounter++;
017A  1283  	BCF STATUS, RP0
017B  0AAF  	INCF gbl_rc5_intfCounter, F

		rc5_logicChange++;
017C  0AAC  	INCF gbl_rc5_logicChange, F

        if (rc5_currentState == rc5_idleState) {
017D  08AD  	MOVF gbl_rc5_currentState, F
017E  1D03  	BTFSS STATUS,Z
017F  298B  	GOTO	label30
018B        label30

            // If the state was idle, start the timer
            rc5_logicInterval = 0;
0180  01AB  	CLRF gbl_rc5_logicInterval

            rc5_logicChange = 0;
0181  01AC  	CLRF gbl_rc5_logicChange

            // Timer 2 should run for about 200us at first
            tmr2 = 0;
0182  0191  	CLRF gbl_tmr2

            // 4MHz settings
            pr2 = IR_PR2_200US;
0183  301A  	MOVLW 0x1A
0184  1683  	BSF STATUS, RP0
0185  0092  	MOVWF gbl_pr2

            pir1.TMR2IF = 0; // Clear interrupt flag
0186  1283  	BCF STATUS, RP0
0187  108C  	BCF gbl_pir1,1

            t2con.TMR2ON = 1; // Timer 2 is on
0188  1512  	BSF gbl_t2con,2

            rc5_currentState = rc5_initialWaitState;
0189  3001  	MOVLW 0x01
018A  00AD  	MOVWF gbl_rc5_currentState

        }
        intcon.INTF = 0; //clear interrupt flag.
018B  108B  	BCF gbl_intcon,1

	}
    // Interrupt on timer2 - IR code https://tamilarduino.blogspot.com/2014/06/ir-remote-philips-rc5-decoding-using.html
    if(pir1.TMR2IF) {
018C  1283  	BCF STATUS, RP0
018D  1303  	BCF STATUS, RP1
018E  1C8C  	BTFSS gbl_pir1,1
018F  2A10  	GOTO	label49
0210        label49

		rc5_pinState = IR_PIN;
0190  01AE  	CLRF gbl_rc5_pinState
0191  1C06  	BTFSS gbl_portb,0
0192  2994  	GOTO	label32
0193  0AAE  	INCF gbl_rc5_pinState, F
0194        label32

        if (rc5_currentState != rc5_initialWaitState) {
0194  032D  	DECF gbl_rc5_currentState, W
0195  1903  	BTFSC STATUS,Z
0196  299C  	GOTO	label33

            rc5_logicInterval++;
0197  0AAB  	INCF gbl_rc5_logicInterval, F

            IR_LED = rc5_logicInterval.0; // Flick IR LED
0198  182B  	BTFSC gbl_rc5_logicInterval,0
0199  1506  	BSF gbl_portb,2
019A  1C2B  	BTFSS gbl_rc5_logicInterval,0
019B  1106  	BCF gbl_portb,2
019C        label33

        }
        char iReset = 0;
019C  01B9  	CLRF interrupt_15_iReset

        // Switch statement to process IR depending on where/state of the command timer currently expects to be
        switch (rc5_currentState){
0206        label47

            // If in initial wait state - timer completed the first 200us, switch to the normal 890us
            case rc5_initialWaitState:
019D  082D  	MOVF gbl_rc5_currentState, W
019E  3A01  	XORLW 0x01
019F  1903  	BTFSC STATUS,Z
01A0  29A8  	GOTO	label34
01A8        label34

                // Timer 2 interrupt every 890us
                tmr2 = 0;
01A8  0191  	CLRF gbl_tmr2

                // 111 for exactly 888us
				pr2 = IR_PR2_890US; // Preload timer2 comparator value - 888us (0.000888s)
01A9  306E  	MOVLW 0x6E
01AA  1683  	BSF STATUS, RP0
01AB  0092  	MOVWF gbl_pr2

                // Switch to start bit state
                rc5_currentState = rc5_startBitState;
01AC  3002  	MOVLW 0x02
01AD  1283  	BCF STATUS, RP0
01AE  00AD  	MOVWF gbl_rc5_currentState

                break;
01AF  2A06  	GOTO	label47

            // If in start bit state - check for (second) start bit, Logic on RB0 must change in 890us or considers as a fault signal.
            case rc5_startBitState:
01A1  3A03  	XORLW 0x03
01A2  1903  	BTFSC STATUS,Z
01A3  29B0  	GOTO	label35
01B0        label35

                if ((rc5_logicInterval == 1) && (rc5_logicChange == 1)) {
01B0  032B  	DECF gbl_rc5_logicInterval, W
01B1  1D03  	BTFSS STATUS,Z
01B2  29BE  	GOTO	label36
01B3  032C  	DECF gbl_rc5_logicChange, W
01B4  1D03  	BTFSS STATUS,Z
01B5  29BE  	GOTO	label36
01BE        label36

                    // Valid start bits were found
                    rc5_logicInterval = 0;
01B6  01AB  	CLRF gbl_rc5_logicInterval

                    rc5_logicChange = 0;
01B7  01AC  	CLRF gbl_rc5_logicChange

                    rc5_bitCount = 0;
01B8  01AA  	CLRF gbl_rc5_bitCount

                    rc5_inputData = 0;
01B9  01A3  	CLRF gbl_rc5_inputData
01BA  01A4  	CLRF gbl_rc5_inputData+D'1'

                    rc5_currentState = rc5_captureBitState; // Switch to capturing state
01BB  3003  	MOVLW 0x03
01BC  00AD  	MOVWF gbl_rc5_currentState

                } else {
01BD  2A06  	GOTO	label47

                    iReset = 1;
01BE  3001  	MOVLW 0x01
01BF  00B9  	MOVWF interrupt_15_iReset

                }
                break;
01C0  2A06  	GOTO	label47

            // If in capture bit state - sample RB0 logic every 1780us (rc5_logicInterval = 2)
            // Data is only valid if the logic on RB0 changed
            // Data is stored in rc5_command and rc5_address
            case rc5_captureBitState:
01A4  3A01  	XORLW 0x01
01A5  1903  	BTFSC STATUS,Z
01A6  29C1  	GOTO	label37
01C1        label37

                // Logic interval must be 2 - 1780us
                if(rc5_logicInterval == 2) {
01C1  082B  	MOVF gbl_rc5_logicInterval, W
01C2  3A02  	XORLW 0x02
01C3  1D03  	BTFSS STATUS,Z
01C4  2A06  	GOTO	label47

                    // Logic change must occur 2 times or less, otherwise it is invalid
                    if(rc5_logicChange <= 2) {
01C5  082C  	MOVF gbl_rc5_logicChange, W
01C6  3C02  	SUBLW 0x02
01C7  1C03  	BTFSS STATUS,C
01C8  2A01  	GOTO	label45
0201        label45

                        rc5_logicInterval = 0;
01C9  01AB  	CLRF gbl_rc5_logicInterval

                        rc5_logicChange = 0;
01CA  01AC  	CLRF gbl_rc5_logicChange

                        // If the number of bits received is less than 12, shift the new bit into the inputData
                        if(rc5_bitCount < 12) {
01CB  300C  	MOVLW 0x0C
01CC  022A  	SUBWF gbl_rc5_bitCount, W
01CD  1803  	BTFSC STATUS,C
01CE  29D7  	GOTO	label38
01D7        label38

                            rc5_bitCount++;
01CF  0AAA  	INCF gbl_rc5_bitCount, F

                            rc5_inputData <<= 1; // Shift recorded bits to the left
01D0  1003  	BCF STATUS,C
01D1  0DA3  	RLF gbl_rc5_inputData, F
01D2  0DA4  	RLF gbl_rc5_inputData+D'1', F

                            if(rc5_pinState == 1) {
01D3  032E  	DECF gbl_rc5_pinState, W
01D4  1903  	BTFSC STATUS,Z

                                rc5_inputData |= 1; // Add the new bit in
01D5  1423  	BSF gbl_rc5_inputData,0

                            }
                        } else {
01D6  2A06  	GOTO	label47

                            // All 12 bits received
                            rc5_command = rc5_inputData & 0x3F; // 00111111 - command is the last 6 bits
01D7  303F  	MOVLW 0x3F
01D8  0523  	ANDWF gbl_rc5_inputData, W
01D9  00B3  	MOVWF gbl_rc5_command

                            rc5_inputData >>= 6; // Shift 6 bits right, clearing command
01DA  3006  	MOVLW 0x06
01DB  00BA  	MOVWF CompTempVar551
01DC  08BA  	MOVF CompTempVar551, F
01DD        label39
01DD  1903  	BTFSC STATUS,Z
01DE  29E4  	GOTO	label40
01DF  1003  	BCF STATUS,C
01E0  0CA4  	RRF gbl_rc5_inputData+D'1', F
01E1  0CA3  	RRF gbl_rc5_inputData, F
01E2  03BA  	DECF CompTempVar551, F
01E3  29DD  	GOTO	label39
01E4        label40

                            rc5_address = rc5_inputData & 0x1F; // 00011111 - address is now the last 5 bits
01E4  301F  	MOVLW 0x1F
01E5  0523  	ANDWF gbl_rc5_inputData, W
01E6  00B2  	MOVWF gbl_rc5_address

                            rc5_inputData >>= 5; // Shift 5 bits right, clearing address
01E7  3005  	MOVLW 0x05
01E8  00BA  	MOVWF CompTempVar552
01E9  08BA  	MOVF CompTempVar552, F
01EA        label41
01EA  1903  	BTFSC STATUS,Z
01EB  29F1  	GOTO	label42
01EC  1003  	BCF STATUS,C
01ED  0CA4  	RRF gbl_rc5_inputData+D'1', F
01EE  0CA3  	RRF gbl_rc5_inputData, F
01EF  03BA  	DECF CompTempVar552, F
01F0  29EA  	GOTO	label41
01F1        label42

                            // Last bit is the flick bit
                            if (rc5_flickBitOld != rc5_inputData) {
01F1  0831  	MOVF gbl_rc5_flickBitOld, W
01F2  0623  	XORWF gbl_rc5_inputData, W
01F3  1903  	BTFSC STATUS,Z
01F4  0824  	MOVF gbl_rc5_inputData+D'1', W
01F5  1903  	BTFSC STATUS,Z
01F6  29FC  	GOTO	label43
01FC        label43

                                rc5_flickBit = 1;
01F7  3001  	MOVLW 0x01
01F8  00B0  	MOVWF gbl_rc5_flickBit

                                rc5_flickBitOld = rc5_inputData;
01F9  0823  	MOVF gbl_rc5_inputData, W
01FA  00B1  	MOVWF gbl_rc5_flickBitOld

                            } else 
01FB  29FD  	GOTO	label44
01FD        label44

                                rc5_flickBit = 0;
01FC  01B0  	CLRF gbl_rc5_flickBit

                            
                            // Flag this task to the task array - IR command will be processed in the main loop
                            cTask.TASK_INT_EXT0 = 1;
01FD  1434  	BSF gbl_cTask,0


                            // Command finished - reset status
                            iReset = 1;
01FE  3001  	MOVLW 0x01
01FF  00B9  	MOVWF interrupt_15_iReset

                        }
                    } else {
0200  2A06  	GOTO	label47

                        // Not valid - reset status
                        iReset = 1;
0201  3001  	MOVLW 0x01
0202  00B9  	MOVWF interrupt_15_iReset

                    }
                }
                break;
0203  2A06  	GOTO	label47

            default: 
01A7  2A04  	GOTO	label46
0204        label46

                iReset = 1;
0204  3001  	MOVLW 0x01
0205  00B9  	MOVWF interrupt_15_iReset

        }
        
        // Reset status if not valid
        if (iReset) {
0206  08B9  	MOVF interrupt_15_iReset, F
0207  1903  	BTFSC STATUS,Z
0208  2A0F  	GOTO	label48
020F        label48

            // Not valid - reset status
            rc5_currentState = rc5_idleState;
0209  01AD  	CLRF gbl_rc5_currentState

            t2con.TMR2ON = 0; // Disable Timer 2
020A  1112  	BCF gbl_t2con,2

            option_reg.INTEDG = 0; // Interrupt on falling edge
020B  1683  	BSF STATUS, RP0
020C  1301  	BCF gbl_option_reg,6

            IR_LED = 0; // switch off IR LED
020D  1283  	BCF STATUS, RP0
020E  1106  	BCF gbl_portb,2

        }
        pir1.TMR2IF = 0; // Clear interrupt flag
020F  108C  	BCF gbl_pir1,1

    }
    // Port change RB4-RB7
    if (intcon.RBIF) {
0210  1C0B  	BTFSS gbl_intcon,0
0211  2A17  	GOTO	label50
0217        label50

		// Have to read portb first, otherwise the interrupt flag sets again
		cPortBCurrent = (portb & 0xC0); // Read the last two bits
0212  30C0  	MOVLW 0xC0
0213  0506  	ANDWF gbl_portb, W
0214  00A8  	MOVWF gbl_cPortBCurrent

		cTask.TASK_INT_PORTB = 1;
0215  1634  	BSF gbl_cTask,4

        intcon.RBIF = 0;
0216  100B  	BCF gbl_intcon,0

    }
    // Interrupt on timer0 - turn motor off
    if(intcon.T0IF) {
0217  1D0B  	BTFSS gbl_intcon,2
0218  2A24  	GOTO	label52
0224        label52

		// Turn motors off
		if (iTmr0Counter > 2) {
0219  0836  	MOVF gbl_iTmr0Counter, W
021A  3C02  	SUBLW 0x02
021B  1803  	BTFSC STATUS,C
021C  2A20  	GOTO	label51
0220        label51

			VOL_UP = 0;
021D  1205  	BCF gbl_porta,4

			VOL_DOWN = 0;
021E  1185  	BCF gbl_porta,3

			iTmr0Counter = 0;
021F  01B6  	CLRF gbl_iTmr0Counter

		}
		iTmr0Counter++;
0220  0AB6  	INCF gbl_iTmr0Counter, F

		tmr0 = 60;
0221  303C  	MOVLW 0x3C
0222  0081  	MOVWF gbl_tmr0

        intcon.T0IF = 0;
0223  110B  	BCF gbl_intcon,2

	}
}
0224  0E22  	SWAPF Int1BContext+D'2', W
0225  0084  	MOVWF FSR
0226  0E21  	SWAPF Int1BContext+D'1', W
0227  008A  	MOVWF PCLATH
0228  0E20  	SWAPF Int1BContext, W
0229  0083  	MOVWF STATUS
022A  0EFF  	SWAPF Int1Context, F
022B  0E7F  	SWAPF Int1Context, W
022C  0009  	RETFIE


// Power on routine
void doPower() {

    if (iPower) {
0044  1283  	BCF STATUS, RP0
0045  1303  	BCF STATUS, RP1
0046  08A7  	MOVF gbl_iPower, F
0047  1903  	BTFSC STATUS,Z
0048  2856  	GOTO	label7
0056        label7

        // Power off sequence
        RLY_MUTE = 0; // Mute amps        
0049  1005  	BCF gbl_porta,0

        iPower = 0;
004A  01A7  	CLRF gbl_iPower

        delay_s(1); // Force a 1 second wait before powering down the amps
004B  3001  	MOVLW 0x01
004C  00B7  	MOVWF delay_s_00000_arg_del
004D  201C  	CALL delay_s_00000

        RLY_POWER = 0; // Power off amps
004E  1085  	BCF gbl_porta,1

		// Off input relays
		RLY_IN1 = 0;
004F  1305  	BCF gbl_porta,6

		RLY_IN2 = 0;
0050  1286  	BCF gbl_portb,5

		RLY_IN3 = 0;
0051  1206  	BCF gbl_portb,4

        delay_s(6); // Force a 6 second wait before the ability to switch on again (allows electronics to drain)
0052  3006  	MOVLW 0x06
0053  00B7  	MOVWF delay_s_00000_arg_del
0054  201C  	CALL delay_s_00000

    } else {
        // Power on sequence
        applyInput(); // Apply last input - In1 [0] is default
0056  202B  	CALL applyInput_00000

        delay_ms(300);
0057  302C  	MOVLW 0x2C
0058  00B8  	MOVWF delay_ms_00000_arg_del
0059  2010  	CALL delay_ms_00000

        RLY_POWER = 1; // Power on amps
005A  1485  	BSF gbl_porta,1

        // Delay mute
        delay_s(2);
005B  3002  	MOVLW 0x02
005C  00B7  	MOVWF delay_s_00000_arg_del
005D  201C  	CALL delay_s_00000

        iPower = 1;
005E  3001  	MOVLW 0x01
005F  00A7  	MOVWF gbl_iPower

        RLY_MUTE = 1; // Unmute amps
0060  1405  	BSF gbl_porta,0

    }
}
0055  0008  	RETURN
0061  0008  	RETURN


void doMute() {

	RLY_MUTE = iMute.0;
0062  1283  	BCF STATUS, RP0
0063  1303  	BCF STATUS, RP1
0064  1835  	BTFSC gbl_iMute,0
0065  1405  	BSF gbl_porta,0
0066  1C35  	BTFSS gbl_iMute,0
0067  1005  	BCF gbl_porta,0

	iMute++;
0068  0AB5  	INCF gbl_iMute, F

}
0069  0008  	RETURN


void applyInput() {

	switch (iActiveInput) {

		case 0:
002B  1283  	BCF STATUS, RP0
002C  1303  	BCF STATUS, RP1
002D  0826  	MOVF gbl_iActiveInput, W
002E  3A00  	XORLW 0x00
002F  1903  	BTFSC STATUS,Z
0030  2838  	GOTO	label4
0038        label4

			RLY_IN1 = 1;
0038  1705  	BSF gbl_porta,6

			RLY_IN2 = 0;
0039  1286  	BCF gbl_portb,5

			RLY_IN3 = 0;
003A  1206  	BCF gbl_portb,4

			break;
		case 1:
0031  3A01  	XORLW 0x01
0032  1903  	BTFSC STATUS,Z
0033  283C  	GOTO	label5
003C        label5

			RLY_IN1 = 0;
003C  1305  	BCF gbl_porta,6

			RLY_IN2 = 1;
003D  1686  	BSF gbl_portb,5

			RLY_IN3 = 0;
003E  1206  	BCF gbl_portb,4

			break;
		case 2:
0034  3A03  	XORLW 0x03
0035  1903  	BTFSC STATUS,Z
0036  2840  	GOTO	label6
0040        label6

			RLY_IN1 = 0;
0040  1305  	BCF gbl_porta,6

			RLY_IN2 = 0;
0041  1286  	BCF gbl_portb,5

			RLY_IN3 = 1;
0042  1606  	BSF gbl_portb,4

			break;
	}
}
0037  0008  	RETURN
003B  0008  	RETURN
003F  0008  	RETURN
0043  0008  	RETURN


/******************************************************
  Functions to adjust the volume
*******************************************************/
void doMotorDown() {

	VOL_UP = 0; // Always turn the other direction off
0072  1283  	BCF STATUS, RP0
0073  1303  	BCF STATUS, RP1
0074  1205  	BCF gbl_porta,4

	VOL_DOWN = 1;
0075  1585  	BSF gbl_porta,3

	// Reset timer1, then start
	iTmr0Counter = 0;
0076  01B6  	CLRF gbl_iTmr0Counter

	tmr0 = 60;
0077  303C  	MOVLW 0x3C
0078  0081  	MOVWF gbl_tmr0

}
0079  0008  	RETURN


void doMotorUp() {

	VOL_DOWN = 0; // Always turn the other direction off
006A  1283  	BCF STATUS, RP0
006B  1303  	BCF STATUS, RP1
006C  1185  	BCF gbl_porta,3

	VOL_UP = 1;
006D  1605  	BSF gbl_porta,4

	// Reset timer1, then start
	iTmr0Counter = 0;
006E  01B6  	CLRF gbl_iTmr0Counter

	tmr0 = 60;
006F  303C  	MOVLW 0x3C
0070  0081  	MOVWF gbl_tmr0

}
0071  0008  	RETURN


/******************************************************
  Functions to adjust the active input
*******************************************************/
void doInputDown() {

    // Decrement the active input
    iActiveInput--;
0083  1283  	BCF STATUS, RP0
0084  1303  	BCF STATUS, RP1
0085  03A6  	DECF gbl_iActiveInput, F

    if (iActiveInput > 3) // If overflowed (less than 0)
0086  0826  	MOVF gbl_iActiveInput, W
0087  3C03  	SUBLW 0x03
0088  1803  	BTFSC STATUS,C
0089  288C  	GOTO	label8
008C        label8

        iActiveInput = 2;
008A  3002  	MOVLW 0x02
008B  00A6  	MOVWF gbl_iActiveInput

    applyInput();
008C  202B  	CALL applyInput_00000

}
008D  0008  	RETURN


void doInputUp() {

    // Increment the active input
    iActiveInput++;
007A  1283  	BCF STATUS, RP0
007B  1303  	BCF STATUS, RP1
007C  0AA6  	INCF gbl_iActiveInput, F

    if (iActiveInput >= 3)
007D  3003  	MOVLW 0x03
007E  0226  	SUBWF gbl_iActiveInput, W
007F  1803  	BTFSC STATUS,C

        iActiveInput = 0;
0080  01A6  	CLRF gbl_iActiveInput

    applyInput();
0081  202B  	CALL applyInput_00000

}
0082  0008  	RETURN


/******************************************************
  Read and process remote control RC5 commands
*******************************************************/
void rc5Process() {

    IR_LED = 0; // switch off IR LED
008E  1283  	BCF STATUS, RP0
008F  1303  	BCF STATUS, RP1
0090  1106  	BCF gbl_portb,2

    if (rc5_address != 0) { // Addresses above zero are not for this device
0091  08B2  	MOVF gbl_rc5_address, F
0092  1D03  	BTFSS STATUS,Z

        return;
    }

    // Process commands
    if (iPower) { // Don't process the following if power is off
0094  08A7  	MOVF gbl_iPower, F
0095  1903  	BTFSC STATUS,Z
0096  28BA  	GOTO	label14

        // Get current volume level
        switch (rc5_command) {
00A7  28BA  	GOTO	label14

            // For each command, cause the correct action 
            case 13: // Mute (13 / 0x0D / D)
0097  0833  	MOVF gbl_rc5_command, W
0098  3A0D  	XORLW 0x0D
0099  1903  	BTFSC STATUS,Z
009A  28A8  	GOTO	label9
00A8        label9

                if (rc5_flickBitOld != rc5_flickBit) { // Prevent repeated muting when holding the button
00A8  0830  	MOVF gbl_rc5_flickBit, W
00A9  0631  	XORWF gbl_rc5_flickBitOld, W
00AA  1D03  	BTFSS STATUS,Z

                    doMute();
00AB  2062  	CALL doMute_00000

                }
                break;
00AC  28BA  	GOTO	label14

            case 16: // Volume up (16 / 0x10 / E)
009B  3A1D  	XORLW 0x1D
009C  1903  	BTFSC STATUS,Z
009D  28AD  	GOTO	label10
00AD        label10

                doMotorUp();
00AD  206A  	CALL doMotorUp_00000

                break;
00AE  28BA  	GOTO	label14

            case 17: // Volume down (17 / 0x11 / F)
009E  3A01  	XORLW 0x01
009F  1903  	BTFSC STATUS,Z
00A0  28AF  	GOTO	label11
00AF        label11

                doMotorDown();
00AF  2072  	CALL doMotorDow_00014

                break;
00B0  28BA  	GOTO	label14

            case 32: // Input right (32 / 0x20 / V)
00A1  3A31  	XORLW 0x31
00A2  1903  	BTFSC STATUS,Z
00A3  28B1  	GOTO	label12
00B1        label12

                if (rc5_flickBitOld != rc5_flickBit) { // Prevent repeated input changing when holding the button
00B1  0830  	MOVF gbl_rc5_flickBit, W
00B2  0631  	XORWF gbl_rc5_flickBitOld, W
00B3  1D03  	BTFSS STATUS,Z

                    doInputUp();
00B4  207A  	CALL doInputUp_00000

                }
                break;
00B5  28BA  	GOTO	label14

            case 33: // Input left (33 / 0x21 / U)
00A4  3A01  	XORLW 0x01
00A5  1903  	BTFSC STATUS,Z
00A6  28B6  	GOTO	label13
00B6        label13

                if (rc5_flickBitOld != rc5_flickBit) { // Prevent repeated input changing when holding the button
00B6  0830  	MOVF gbl_rc5_flickBit, W
00B7  0631  	XORWF gbl_rc5_flickBitOld, W
00B8  1D03  	BTFSS STATUS,Z

                    doInputDown();
00B9  2083  	CALL doInputDow_00013
00BA        label14

                }
                break;
        }
    }
    // Process power button regardless of power state
    if (rc5_command == 12) { // Power (12 / 0x0C / A)
00BA  0833  	MOVF gbl_rc5_command, W
00BB  3A0C  	XORLW 0x0C
00BC  1D03  	BTFSS STATUS,Z

        if (rc5_flickBitOld != rc5_flickBit) // Prevent repeated power when holding the button
00BE  0830  	MOVF gbl_rc5_flickBit, W
00BF  0631  	XORWF gbl_rc5_flickBitOld, W
00C0  1D03  	BTFSS STATUS,Z

            doPower();
00C1  2044  	CALL doPower_00000

    }
}
0093  0008  	RETURN
00BD  0008  	RETURN
00C2  0008  	RETURN


void checkPowerSw() {

    // check pin 5 on port b has changed
	if (!SW_PWR) { // Switch pressed, wait 500ms
00FB  1283  	BCF STATUS, RP0
00FC  1303  	BCF STATUS, RP1
00FD  1886  	BTFSC gbl_portb,1

		delay_ms(700);
00FF  30BC  	MOVLW 0xBC
0100  00B8  	MOVWF delay_ms_00000_arg_del
0101  2010  	CALL delay_ms_00000

		if (!SW_PWR) { // if still pressed, activate power on/off sequence
0102  1C86  	BTFSS gbl_portb,1

			doPower();
0103  2044  	CALL doPower_00000

		}
	}
}
00FE  0008  	RETURN
0104  0008  	RETURN


void checkEncoders() {

	if (cPortBCurrent != cPortBPrevious) { // Check bits 6 and 7
0105  1283  	BCF STATUS, RP0
0106  1303  	BCF STATUS, RP1
0107  0829  	MOVF gbl_cPortBPrevious, W
0108  0628  	XORWF gbl_cPortBCurrent, W
0109  1903  	BTFSC STATUS,Z

	 	// Input must have changed
		// Clockwise rotation
		// A = 0, B = 0
		// A = 1, B = 0
		// A = 1, B = 1
		// A = 0, B = 1
		if (iPower) { // Don't process the following if power is off
010B  08A7  	MOVF gbl_iPower, F
010C  1903  	BTFSC STATUS,Z
010D  2945  	GOTO	label23

			switch (cPortBPrevious) {
011B  2945  	GOTO	label23

				case 0x00: // A off B off
010E  0829  	MOVF gbl_cPortBPrevious, W
010F  3A00  	XORLW 0x00
0110  1903  	BTFSC STATUS,Z
0111  291C  	GOTO	label15
011C        label15

					if (cPortBCurrent == 0x40) { // A on B off
011C  0828  	MOVF gbl_cPortBCurrent, W
011D  3A40  	XORLW 0x40
011E  1D03  	BTFSS STATUS,Z
011F  2922  	GOTO	label16
0122        label16

						// Clockwise
						doInputUp();
0120  207A  	CALL doInputUp_00000

					} else if (cPortBCurrent == 0x80) { // A off B on
0121  2945  	GOTO	label23
0122  0828  	MOVF gbl_cPortBCurrent, W
0123  3A80  	XORLW 0x80
0124  1903  	BTFSC STATUS,Z

						// Counter clockwise
						doInputDown();
0125  2083  	CALL doInputDow_00013

					}
					break;
0126  2945  	GOTO	label23

				case 0x40: // A on B off
0112  3A40  	XORLW 0x40
0113  1903  	BTFSC STATUS,Z
0114  2927  	GOTO	label17
0127        label17

					if (cPortBCurrent == 0xC0) { // A on B on
0127  0828  	MOVF gbl_cPortBCurrent, W
0128  3AC0  	XORLW 0xC0
0129  1D03  	BTFSS STATUS,Z
012A  292D  	GOTO	label18
012D        label18

						// Clockwise
						doInputUp();
012B  207A  	CALL doInputUp_00000

					} else if (cPortBCurrent == 0x00) { // A off B off
012C  2945  	GOTO	label23
012D  08A8  	MOVF gbl_cPortBCurrent, F
012E  1903  	BTFSC STATUS,Z

						// Counter clockwise
						doInputDown();
012F  2083  	CALL doInputDow_00013

					}
					break;
0130  2945  	GOTO	label23

				case 0xC0: // A on B on
0115  3A80  	XORLW 0x80
0116  1903  	BTFSC STATUS,Z
0117  2931  	GOTO	label19
0131        label19

					if (cPortBCurrent == 0x80) { // A off B on
0131  0828  	MOVF gbl_cPortBCurrent, W
0132  3A80  	XORLW 0x80
0133  1D03  	BTFSS STATUS,Z
0134  2937  	GOTO	label20
0137        label20

						// Clockwise
						doInputUp();
0135  207A  	CALL doInputUp_00000

					} else if (cPortBCurrent == 0x40) { // A on B off
0136  2945  	GOTO	label23
0137  0828  	MOVF gbl_cPortBCurrent, W
0138  3A40  	XORLW 0x40
0139  1903  	BTFSC STATUS,Z

						// Counter clockwise
						doInputDown();
013A  2083  	CALL doInputDow_00013

					}
					break;
013B  2945  	GOTO	label23

				case 0x80: // A off B on
0118  3A40  	XORLW 0x40
0119  1903  	BTFSC STATUS,Z
011A  293C  	GOTO	label21
013C        label21

					if (cPortBCurrent == 0x00) { // A off B off
013C  08A8  	MOVF gbl_cPortBCurrent, F
013D  1D03  	BTFSS STATUS,Z
013E  2941  	GOTO	label22
0141        label22

						// Clockwise
						doInputUp();
013F  207A  	CALL doInputUp_00000

					} else if (cPortBCurrent == 0xC0) { // A on B on
0140  2945  	GOTO	label23
0141  0828  	MOVF gbl_cPortBCurrent, W
0142  3AC0  	XORLW 0xC0
0143  1903  	BTFSC STATUS,Z

						// Counter clockwise
						doInputDown();
0144  2083  	CALL doInputDow_00013
0145        label23

					}
					break;
			}
		}
		cPortBPrevious = cPortBCurrent;
0145  0828  	MOVF gbl_cPortBCurrent, W
0146  00A9  	MOVWF gbl_cPortBPrevious

	}
}
010A  0008  	RETURN
0147  0008  	RETURN


void main()

{
	initialise();
0148  20C3  	CALL initialise_00000


	while(1) {
0149        label24
0159  2949  	GOTO	label24

        // Task scheduler
        // If there are tasks to be performed, find out the
        // most recent task from the array and execute it
        while (cTask > 0) {
0149  0834  	MOVF gbl_cTask, W
014A  3C00  	SUBLW 0x00
014B  1803  	BTFSC STATUS,C
014C  2958  	GOTO	label26
0157  2949  	GOTO	label24
0158        label26

		    if (cTask.TASK_INT_EXT0) {
014D  1C34  	BTFSS gbl_cTask,0
014E  2953  	GOTO	label25
0153        label25

				rc5Process(); // IR sensor received a signal
014F  208E  	CALL rc5Process_00000

				IR_LED = 0; // Ensure LED is off
0150  1106  	BCF gbl_portb,2

				cTask.TASK_INT_EXT0 = 0;
0151  1034  	BCF gbl_cTask,0

			} else if (cTask.TASK_INT_PORTB) {
0152  2949  	GOTO	label24
0153  1E34  	BTFSS gbl_cTask,4
0154  2949  	GOTO	label24

                checkEncoders();
0155  2105  	CALL checkEncod_00016

                cTask.TASK_INT_PORTB = 0;
0156  1234  	BCF gbl_cTask,4

            }
		}
		// Poll power switch
		checkPowerSw();
0158  20FB  	CALL checkPower_00015

	}
}


////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  295A  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00A0  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00A1  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00A2  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  296D  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08B8  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BB8  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end

001C        delay_s_00000
001C        ; { delay_s ; function begin
001C        label3
001C  30FA  	MOVLW 0xFA
001D  00B8  	MOVWF delay_ms_00000_arg_del
001E  2010  	CALL delay_ms_00000
001F  30FA  	MOVLW 0xFA
0020  00B8  	MOVWF delay_ms_00000_arg_del
0021  2010  	CALL delay_ms_00000
0022  30FA  	MOVLW 0xFA
0023  00B8  	MOVWF delay_ms_00000_arg_del
0024  2010  	CALL delay_ms_00000
0025  30FA  	MOVLW 0xFA
0026  00B8  	MOVWF delay_ms_00000_arg_del
0027  2010  	CALL delay_ms_00000
0028  0BB7  	DECFSZ delay_s_00000_arg_del, F
0029  281C  	GOTO	label3
002A  0008  	RETURN
002B        ; } delay_s function end


















015A        _startup

016A  118A  	BCF PCLATH,3
016B  120A  	BCF PCLATH,4
016C  2948  	GOTO	main





2007  3F18  	DW 0x3F18
